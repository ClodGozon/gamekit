
/**********************************************************************

Copyright (c) 2015 - 2016 Robert May

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

**********************************************************************/

#include "stdafx.h"
#include "ResourceUtilities.h"
#include "GameUtilities.h"

#include "..\buildsettings.h"
#include "..\coreutilities\Components.h"
#include "..\coreutilities\MeshUtils.h"
#include "..\graphicsutilities\AnimationUtilities.h"
#include "..\graphicsutilities\graphics.h"
#include <Windows.h>
#include <shobjidl.h> 
#pragma comment(lib, "Ole32.lib")
#pragma comment(lib, "oleaut32.lib")
#pragma comment(lib, "Shell32.lib")

// FBX Loading
#include				"fbxsdk/include/fbxsdk.h"
#pragma comment	(lib,	"libfbxsdk.lib")


using namespace FlexKit;

/************************************************************************************************/


Pair<bool, fbxsdk::FbxScene*>  
LoadFBXScene(char* file, fbxsdk::FbxManager* lSdkManager, fbxsdk::FbxIOSettings* settings)
{
	fbxsdk::FbxNode*	 node	  = nullptr;
	fbxsdk::FbxImporter* importer = fbxsdk::FbxImporter::Create(lSdkManager, "");

	if (!importer->Initialize(file, -1, lSdkManager->GetIOSettings()))
	{
		printf("Failed to Load: %s\n", file);
		printf("Error Returned: %s\n", importer->GetStatus().GetErrorString());
		return{ false, nullptr };
	}

	fbxsdk::FbxScene* scene = FbxScene::Create(lSdkManager, "Scene");
	if (!importer->Import(scene))
	{
		printf("Failed to Load: %s\n", file);
		printf("Error Returned: %s\n", importer->GetStatus().GetErrorString());
		return{ false, nullptr };
	}
	return{ true, scene };
}


/************************************************************************************************/


float3 TranslateToFloat3(FbxVector4& in)
{
	return float3(
		in.mData[0], 
		in.mData[1], 
		in.mData[2]);
}

float3 TranslateToFloat3(FbxDouble3& in)
{
	return float3(
		in.mData[0],
		in.mData[1],
		in.mData[2]);
}

float4 TranslateToFloat4(FbxVector4& in)
{
	return float4(
		in.mData[0],
		in.mData[1],
		in.mData[2],
		in.mData[3]);
}

FbxVector4 ReadNormal(int index, fbxsdk::FbxMesh* Mesh)	
{ 
	FbxVector4 out;
	auto Normals = Mesh->GetElementNormal(index); 
	auto Mapping = Normals->GetMappingMode();

	out = Normals->GetDirectArray().GetAt(index);
	switch (Mapping)
	{
	case fbxsdk::FbxLayerElement::eNone:
		break;
	case fbxsdk::FbxLayerElement::eByControlPoint:
			{
				switch (Normals->GetReferenceMode())
				{
				case fbxsdk::FbxLayerElement::eDirect:
					out = Normals->GetDirectArray().GetAt(index);
					break;
				case fbxsdk::FbxLayerElement::eIndexToDirect:
				{
					int normalIndex = Normals->GetIndexArray().GetAt(index);
					out = Normals->GetDirectArray().GetAt(normalIndex);
				}	break;
				default:
					break;
				}
			}
		break;
	case fbxsdk::FbxLayerElement::eByPolygonVertex:
	{
		auto NormalIndex = Normals->GetIndexArray();
		auto NIndex = NormalIndex.GetAt(index);
		{
			switch (Normals->GetReferenceMode())
			{
			case fbxsdk::FbxLayerElement::eDirect:
			{
				out = Normals->GetDirectArray().GetAt(index);
			}	break;
			case fbxsdk::FbxLayerElement::eIndexToDirect:
			{
				int x = 0;
			}	break;
			default:
				break;
			}
		}

		//Normals->GetReferenceMode();
	}
	default:
		break;
	}
	return out;
}


/************************************************************************************************/


struct Engine
{
	BlockAllocator* MemoryOut;
	StackAllocator* TempMem;
	StackAllocator* LevelMem;
	RenderSystem*	RS;
	ShaderTable*	Materials;
};

struct FBXVertexLayout
{
	float3 POS		= {0};
	float3 Normal	= {0};
	float3 Tangent	= {0};
	float3 TexCord1	= {0};
	float3 Weight	= {0}; 
};


/************************************************************************************************/


uint32_t FetchIndex(size_t itr, fbxsdk::FbxMesh* Mesh)
{
#ifdef _DEBUG 
	int PolygonID	= itr / 3;
	int IndexID		= itr % 3;
	
	static size_t DIndexes[1024];

	size_t VI = Mesh->GetPolygonVertex(itr / 3, itr % 3);
	//DIndexes[itr] = VI;
#endif
	//Mesh->GetP
	return Mesh->GetPolygonVertex(itr/3, itr % 3);
}


/************************************************************************************************/


uint32_t FetchIndex2(size_t itr, FlexKit::MeshUtilityFunctions::IndexList* IL)
{
	return IL->operator[](itr);
}


/************************************************************************************************/


float3 FetchVertexPOS(size_t itr, FlexKit::MeshUtilityFunctions::CombinedVertexBuffer* Buff)
{ 
	return Buff->operator[](itr).POS;
}


/************************************************************************************************/


float3 FetchWeights(size_t itr, FlexKit::MeshUtilityFunctions::CombinedVertexBuffer* Buff)
{ 
	return Buff->operator[](itr).WEIGHTS;
}


/************************************************************************************************/


uint4_32 FetchWeightIndices( size_t itr, FlexKit::MeshUtilityFunctions::CombinedVertexBuffer* Buff )
{
	return Buff->operator[](itr).WIndices;
}


/************************************************************************************************/


float3 FetchVertexNormal(size_t itr, FlexKit::MeshUtilityFunctions::CombinedVertexBuffer* Buff)
{
	return Buff->operator[](itr).NORMAL;
}


/************************************************************************************************/


float3 FetchFloat3ZERO(size_t itr, FlexKit::MeshUtilityFunctions::CombinedVertexBuffer* Buff)
{
	return{ 0.0f, 0.0f, 0.0f };
}


/************************************************************************************************/


float2 FetchVertexUV(size_t itr, FlexKit::MeshUtilityFunctions::CombinedVertexBuffer* Buff)
{
	auto temp = Buff->operator[](itr).TEXCOORD.xy();
	return {temp.x, temp.y};
}


/************************************************************************************************/


uint32_t WriteIndex(uint32_t in)
{
	return in;
}


/************************************************************************************************/


float3 WriteVertex(float3 in)
{
	return in;
}


/************************************************************************************************/
 

float2 WriteUV(float2 in)
{
	return in;
}


/************************************************************************************************/


uint4_32 Writeuint4(uint4_32 in)
{
	return uint4_32{ 
		(in[0] == -1) ? 0 : in[0], 
		(in[1] == -1) ? 0 : in[1], 
		(in[2] == -1) ? 0 : in[2], 
		(in[3] == -1) ? 0 : in[3] };
}


/************************************************************************************************/


size_t GetVertexIndex(size_t pIndex, size_t vIndex, size_t vID, fbxsdk::FbxMesh* Mesh)	
{ 
	return Mesh->GetPolygonVertex(pIndex, vIndex);
}


/************************************************************************************************/


size_t GetNormalIndex(size_t pIndex, size_t vIndex,size_t vID, fbxsdk::FbxMesh* Mesh)
{
	using FlexKit::MeshUtilityFunctions::TokenList;

	int CPIndex = Mesh->GetPolygonVertex(pIndex, vIndex);
	auto NElement = Mesh->GetElementNormal(0);

	auto MappingMode = NElement->GetMappingMode();
	switch (NElement->GetMappingMode())
	{
		case FbxGeometryElement::eByPolygonVertex:
		{
			auto ReferenceMode = NElement->GetReferenceMode();
			switch (NElement->GetReferenceMode())
			{
			case FbxGeometryElement::eDirect:
			{
				return vID;
			}	break;
			case FbxGeometryElement::eIndexToDirect:
			{
				int index = NElement->GetIndexArray().GetAt(vID);
				return index;
			}
			break;
			default:
				break; // other reference modes not shown here!
			}
		}	break;
		case FbxGeometryElement::eByControlPoint:
		{
			switch (NElement->GetReferenceMode())
			{
			case FbxGeometryElement::eDirect:
				return CPIndex;
			case FbxGeometryElement::eIndexToDirect:
				return NElement->GetIndexArray().GetAt(CPIndex);
				break;
			default:
				break;
			}
		}	break;
	}
	return -1;
}


/************************************************************************************************/


size_t GetTexcordIndex(size_t pIndex, size_t vIndex, fbxsdk::FbxMesh* Mesh)
{
	int CPIndex = Mesh->GetPolygonVertex(pIndex, vIndex);
	auto UVElement = Mesh->GetElementUV(0);
	if ( !UVElement )
		return 0;

	switch (UVElement->GetMappingMode())
	{
		case FbxGeometryElement::eByControlPoint:
		{
			switch (UVElement->GetReferenceMode())
			{
			case FbxGeometryElement::eDirect:
				return CPIndex;
			case FbxGeometryElement::eIndexToDirect:
				return UVElement->GetIndexArray().GetAt(CPIndex);
				break;
			default:
				break;
			}
		}break;
			return -1;

		case FbxGeometryElement::eByPolygonVertex:
			switch (UVElement->GetReferenceMode())
			{
			case FbxGeometryElement::eDirect:
			case FbxGeometryElement::eIndexToDirect:
			{
				int lTextureUVIndex = Mesh->GetTextureUVIndex(pIndex, vIndex);
				return lTextureUVIndex;
			}
			break;
			default:
				break; // other reference modes not shown here!
			}

		case FbxGeometryElement::eByPolygon: // doesn't make much sense for UVs
		case FbxGeometryElement::eAllSame:   // doesn't make much sense for UVs
		case FbxGeometryElement::eNone:      // doesn't make much sense for UVs
			return -1;
	}
	return -1;
}


/************************************************************************************************/


struct FBXSkinDeformer
{
	struct BoneWeights
	{
		const char*	Name;
		float*		Weights;
		size_t*		WeightIndices;
		size_t		WeightCount;
	}* Bones;

	uint4_32* WeightIndices;
	size_t size;

	size_t BoneCount;
};

struct FBXMeshDesc
{
	bool UV;
	bool Normals;
	bool Weights;

	FBXSkinDeformer Skin;
};

FBXSkinDeformer CreateSkin(fbxsdk::FbxMesh* Mesh, Engine* E)
{	// Get Weights
	FBXSkinDeformer	Out = {};

	auto DeformerCount  = Mesh->GetDeformerCount();
	for ( size_t I = 0; I < DeformerCount; ++I )
	{
		fbxsdk::FbxStatus S;
		auto D		= Mesh->GetDeformer(I, &S);
		auto Type	= D->GetDeformerType();
		switch ( Type ) {
		case fbxsdk::FbxDeformer::EDeformerType::eSkin:
		{
			auto Skin			= (FbxSkin*)D;
			auto ClusterCount	= Skin->GetClusterCount();
			
			Out.Bones = (FBXSkinDeformer::BoneWeights*)E->TempMem->malloc( sizeof( FBXSkinDeformer::BoneWeights ) * ClusterCount );
			for ( size_t II = 0; II < ClusterCount; ++II)
			{
				Out.BoneCount++;

				auto Cluster		= Skin->GetCluster( II );
				auto ClusterName	= Cluster->GetLink()->GetName();
				size_t CPICount		= Cluster->GetControlPointIndicesCount();
				auto CPIndices		= Cluster->GetControlPointIndices();
				auto Weights		= Cluster->GetControlPointWeights();

				auto Bone = Cluster->GetLink();
				auto BoneAttrib = Bone->GetNodeAttribute();
				if (BoneAttrib->GetAttributeType() == FbxNodeAttribute::eSkeleton)
				{
					fbxsdk::FbxAMatrix T;
					fbxsdk::FbxAMatrix G(Bone->GetGeometricTranslation(FbxNode::eSourcePivot), Bone->GetGeometricRotation(FbxNode::eSourcePivot), Bone->GetGeometricScaling(FbxNode::eSourcePivot));
					fbxsdk::FbxAMatrix M;
					fbxsdk::FbxAMatrix P;

					Cluster->GetTransformMatrix(M);
					Cluster->GetTransformParentMatrix(P);
					Cluster->GetTransformLinkMatrix(T);

					auto TI		= T.Inverse();
					auto GP		= TI * M;
					auto Name	= Bone->GetName();
					auto TR		= GP.GetT();

					Bone->LclRotation.		Set(T.GetR());
					Bone->LclTranslation.	Set(T.GetT());
					Bone->LclScaling.		Set(T.GetS());
				}

				Out.Bones[II].Name			= ClusterName;
				Out.Bones[II].Weights		= (float*)E->TempMem->malloc( sizeof( float ) * CPICount );
				Out.Bones[II].WeightIndices	= (size_t*)E->TempMem->malloc( sizeof( size_t ) * CPICount );
				Out.Bones[II].WeightCount	= CPICount;

				for ( size_t III = 0; III < CPICount; ++III ){
					Out.Bones[II].Weights		[III] = 0.0f;
					Out.Bones[II].WeightIndices	[III] = 0;
				}

				for ( size_t III = 0; III < CPICount; ++III ){
					Out.Bones[II].Weights		[III] = Weights		[III];
					Out.Bones[II].WeightIndices	[III] = CPIndices	[III];
				}
			}

		}	break;
		}
	}
	return Out;
}


/************************************************************************************************/


FBXMeshDesc TranslateToTokens(fbxsdk::FbxMesh* Mesh, Engine* E, MeshUtilityFunctions::TokenList& TokensOut)
{
	using FlexKit::MeshUtilityFunctions::OBJ_Tools::AddNormalToken;
	using FlexKit::MeshUtilityFunctions::OBJ_Tools::AddIndexToken;
	using FlexKit::MeshUtilityFunctions::OBJ_Tools::AddTexCordToken;
	using FlexKit::MeshUtilityFunctions::OBJ_Tools::AddVertexToken;
	using FlexKit::MeshUtilityFunctions::OBJ_Tools::AddWeightToken;
	using fbxsdk::FbxLayerElement;

	FBXMeshDesc	out = {};

	{	// Get Vertices
		size_t VCount = Mesh->GetControlPointsCount();
		auto CPs = Mesh->mControlPoints;

		for (int itr = 0; itr < VCount; ++itr){
			auto V = CPs[itr];
			AddVertexToken(TranslateToFloat3(V), TokensOut);
		}
	}

	{	// Get Normals
		size_t	NormalCount = Mesh->GetElementNormalCount();
		auto	Normals		= Mesh->GetElementNormal();
		size_t	NCount		= Mesh->GetPolygonVertexCount();
		auto	mapping		= Normals->GetMappingMode();

		if ( NormalCount )
			out.Normals = true;

		for (int itr = 0; itr < NCount; ++itr)
		{
			auto N = Normals->GetDirectArray().GetAt(itr);
			AddNormalToken(TranslateToFloat3(N), TokensOut);
		}
	}
	
	{	// Get UV's
		auto UVElement = Mesh->GetElementUV(0);
		if ( UVElement ) {
			out.UV = true;
			auto size = UVElement->GetDirectArray().GetCount();
			for ( size_t I = 0; I < size; ++I ){
				auto UV = UVElement->GetDirectArray().GetAt( I );
				AddTexCordToken({float(UV[0]), float(UV[1]), 0.0f}, TokensOut);
			}
		}
	}

	// Get Use-able Deformers
	if (Mesh->GetDeformerCount())
	{
		size_t		VCount		= Mesh->GetControlPointsCount();
		float4*		Weights		= (float4*)E->TempMem->_aligned_malloc	( sizeof( float4 )    * VCount );
		uint4_32*	BoneIndices = (uint4_32*)E->TempMem->_aligned_malloc( sizeof( uint4_32  ) * VCount );

		for (size_t I = 0; I < VCount; ++I)
			Weights[I] = {0.0f, 0.0f, 0.0f, 0.0f};
		
		for (size_t I = 0; I < VCount; ++I)
			BoneIndices[I] = {-1, -1, -1, -1};

		auto Skin			= CreateSkin(Mesh, E);
		Skin.WeightIndices	= BoneIndices;

		for (size_t I = 0; I < Skin.BoneCount; ++I)
		{
			for (size_t II = 0; II < Skin.Bones[I].WeightCount; ++II)
			{
				size_t III = 0;
				for (; III < 4; ++III)
				{
					size_t Index = Skin.Bones[I].WeightIndices[II];
					if (BoneIndices[Index][III] == -1)
						break;
				}

				if (III != 4) {
					Weights		[Skin.Bones[I].WeightIndices[II]][III] = Skin.Bones[I].Weights[II];
					BoneIndices	[Skin.Bones[I].WeightIndices[II]][III] = I;
				}
			}
		}

		for (size_t I = 0; I < VCount; ++I) {
			AddWeightToken({Weights[I].pFloats, BoneIndices[I]}, TokensOut);
		}
		
		out.Weights = true;
		out.Skin = Skin;
	}

	
	{	// Calculate Indices
		auto Normals		= Mesh->GetElementNormal();
		auto UVs			= Mesh->GetElementUV(0);

		size_t NormalCount = Mesh->GetElementNormalCount();
		size_t TriCount	   = Mesh->GetPolygonCount();
		size_t IndexCount  = 0;

		// Iterate through each Tri
		for (size_t I = 0; I < TriCount; ++I)
		{	// Process each Vertex in tri
			unsigned int size = Mesh->GetPolygonSize( I );

			size_t	NC = Mesh->GetElementNormal()->GetDirectArray().GetCount();

			if (size == 3)
			{
				auto VertexIndex1 = GetVertexIndex					( I, 0, IndexCount,		Mesh );
				auto NormalIndex1 = out.Normals ? GetNormalIndex	( I, 0, IndexCount,		Mesh ) : 0;
				auto UVCordIndex1 = out.UV		? GetTexcordIndex	( I, 0,					Mesh ) : 0;

				auto VertexIndex2 = GetVertexIndex					( I, 1, IndexCount + 1, Mesh );
				auto NormalIndex2 = out.Normals ? GetNormalIndex	( I, 1, IndexCount + 1, Mesh ) : 0;
				auto UVCordIndex2 = out.UV		? GetTexcordIndex	( I, 1,					Mesh ) : 0;

				auto VertexIndex3 = GetVertexIndex					( I, 2, IndexCount + 2, Mesh );
				auto NormalIndex3 = out.Normals ? GetNormalIndex	( I, 2, IndexCount + 2, Mesh ) : 0;
				auto UVCordIndex3 = out.UV		? GetTexcordIndex	( I, 2,					Mesh ) : 0;

				AddIndexToken( VertexIndex1, NormalIndex1, 0, TokensOut );
				AddIndexToken( VertexIndex3, NormalIndex3, 0, TokensOut );
				AddIndexToken( VertexIndex2, NormalIndex2, 0, TokensOut );

				IndexCount += 3;
			}
			else if ( size == 4 )
			{	// Quads
				FK_ASSERT(false);

				auto VertexIndex1 =				  GetVertexIndex	( I, 0, IndexCount,		Mesh );
				auto NormalIndex1 = out.Normals ? GetNormalIndex	( I, 0, IndexCount,		Mesh ) : 0;
				auto UVCordIndex1 = out.UV		? GetTexcordIndex	( I, 0,					Mesh ) : 0;

				auto VertexIndex2 =				   GetVertexIndex	( I, 1, IndexCount + 1, Mesh );
				auto NormalIndex2 = out.Normals  ? GetNormalIndex	( I, 1, IndexCount + 1, Mesh ) : 0;
				auto UVCordIndex2 = out.UV		 ? GetTexcordIndex	( I, 1,					Mesh ) : 0;

				auto VertexIndex3 =				  GetVertexIndex	( I, 2, IndexCount + 2, Mesh );
				auto NormalIndex3 = out.Normals ? GetNormalIndex	( I, 2, IndexCount + 2, Mesh ) : 0;
				auto UVCordIndex3 = out.UV		? GetTexcordIndex	( I, 2,					Mesh ) : 0;

				auto VertexIndex4 =				  GetVertexIndex	( I, 3, IndexCount + 3, Mesh );
				auto NormalIndex4 = out.Normals ? GetNormalIndex	( I, 3, IndexCount + 3, Mesh ) : 0;
				auto UVCordIndex4 = out.UV		? GetTexcordIndex	( I, 3,					Mesh ) : 0;

				AddIndexToken( VertexIndex1, NormalIndex1, 0, TokensOut );
				AddIndexToken( VertexIndex3, NormalIndex3, 0, TokensOut );
				AddIndexToken( VertexIndex2, NormalIndex2, 0, TokensOut );

				AddIndexToken( VertexIndex1, NormalIndex1, 0, TokensOut );
				AddIndexToken( VertexIndex3, NormalIndex3, 0, TokensOut );
				AddIndexToken( VertexIndex4, NormalIndex4, 0, TokensOut );

				IndexCount += 6;
			}
		}
		int x = 0;
	}

	return out;
}


/************************************************************************************************/


struct GeometryBlock
{
	static const size_t	BlockSize	= 10;
	size_t				MeshUsed	= 0;
	TriMesh				Meshes[BlockSize];

	GeometryBlock*	Next	= nullptr;
};

template<typename TY_ALLOC>
size_t PushGeo(GeometryBlock* GB, TriMesh& Mesh, TY_ALLOC Alloc)
{
	if (GB->MeshUsed > GeometryBlock::BlockSize )
	{
		GB->Next = CreateGB( Alloc );
		return PushGeo( GB->Next, Mesh, Alloc );
	}
	GB->Meshes[ GB->MeshUsed ] = Mesh;
	return GB->MeshUsed++;
};

size_t GetGeoCount(GeometryBlock* GB)
{
	size_t Count = GB->MeshUsed;
	if(Count > GeometryBlock::BlockSize)
		Count += GetGeoCount(GB->Next);

	return Count;
};

template<typename TY_ALLOC>
GeometryBlock* CreateGB(TY_ALLOC* Alloc)
{
	auto GB = (GeometryBlock*)Alloc->_aligned_malloc(sizeof(GeometryBlock));
	GB->MeshUsed	= 0;
	GB->Next		= 0;
	return GB;
}

TriMesh* FindGeoByID(GeometryBlock* GB, size_t ID)
{
	for(size_t i = 0; i < GB->MeshUsed; i++)
	{
		if(GB->Meshes[i].TriMeshID == ID)
			return &GB->Meshes[i];
	}
	if(GB->MeshUsed > GB->BlockSize)
		return FindGeoByID(GB->Next, ID);
	else
		return nullptr;
}

void MoveGeo(GeometryBlock* GB, TriMesh* out, size_t I = 0)
{
	for (;I < GB->MeshUsed; ++I)
		out[I] = GB->Meshes[I%GeometryBlock::BlockSize];

	if (GB->MeshUsed > GeometryBlock::BlockSize)
		MoveGeo( GB, out, I );
}


fbxsdk::FbxNode* FindSkeletonRoot(fbxsdk::FbxMesh* M)
{
	auto DeformerCount  = M->GetDeformerCount();
	for (size_t I = 0; I < DeformerCount; ++I)
	{
		fbxsdk::FbxStatus S;
		auto D		= M->GetDeformer(I, &S);
		auto Type	= D->GetDeformerType();

		switch (Type)
		{
		case fbxsdk::FbxDeformer::EDeformerType::eSkin:
		{
			auto Skin			= (FbxSkin*)D;
			auto ClusterCount	= Skin->GetClusterCount();

			auto Cluster		= Skin->GetCluster(0);
			auto CLBone			= Cluster->GetLink();
			auto CLBoneAttrib	= CLBone->GetNodeAttribute();
			auto CLBoneName		= CLBone->GetName();
			auto* I				= CLBone;

			while (true)
			{
				if (I->GetParent()->GetNodeAttribute())
				{
					auto Sk = (I->GetParent()->GetNodeAttribute()->GetAttributeType() == FbxNodeAttribute::EType::eSkeleton) ?
						(FbxSkeleton*)I->GetParent()->GetNodeAttribute() : nullptr;
					if (Sk)
						I = I->GetParent();
					else
						return I;
				} else
					return nullptr;
			}

		}	break;
		default:
			break;
		}
	}

	return nullptr;
}


/************************************************************************************************/


struct	JointAnimation
{
	struct Pose
	{
		Quaternion	Rotation;
		float3		Translation;
		float3		Scale;
		double		T;
		double		_Pad;
	}* Poses;

	size_t FrameCount;
};

struct JointInfo
{
	JointAndPose	Joint;
	JointAnimation	Animation;
	XMMATRIX		Global;
};


template<typename TY_MEM>
JointAnimation GetJointAnimation(FbxNode* N, TY_MEM* M)
{
	auto Scene          = N->GetScene();
	auto AnimationStack = Scene->GetCurrentAnimationStack();
	auto TakeInfo       = Scene->GetTakeInfo(AnimationStack->GetName());
	auto Begin		    = TakeInfo->mLocalTimeSpan.GetStart();
	auto End		    = TakeInfo->mLocalTimeSpan.GetStop();
	auto Duration		= End - Begin;
	auto FrameRate		= 1.0f / 60.0f;

	JointAnimation	A; 
	A.Poses			= (JointAnimation::Pose*)M->_aligned_malloc(sizeof(JointAnimation::Pose) * Duration.GetFrameCount(FbxTime::eFrames60));
	A.FrameCount	= Duration.GetFrameCount(FbxTime::eFrames60);

	for(size_t I = 0; I < size_t(Duration.GetFrameCount(FbxTime::eFrames60)); ++I)
	{
		FbxTime	CurrentFrame;
		CurrentFrame.SetFrame(I, FbxTime::eFrames60);

		auto R = N->EvaluateLocalRotation		(CurrentFrame);
		auto T = N->EvaluateLocalTranslation	(CurrentFrame);
		auto S = N->EvaluateLocalScaling		(CurrentFrame);

		A.Poses[I].Rotation		= Quaternion(R.Buffer()[0], R.Buffer()[1], R.Buffer()[2]);
		A.Poses[I].Translation	= float3	(T.Buffer()[0], T.Buffer()[1], T.Buffer()[2]);
		A.Poses[I].Scale		= float3	(S.Buffer()[0], S.Buffer()[1], S.Buffer()[2]);
	}

	return A;
}


void FindAllJoints(static_vector<JointInfo, 1024>& Out, FbxNode* N, size_t Parent, StackAllocator* MEM)
{
	if (N->GetNodeAttribute() && N->GetNodeAttribute()->GetAttributeType() == FbxNodeAttribute::eSkeleton )
	{
		fbxsdk::FbxSkeleton* Sk = (fbxsdk::FbxSkeleton*)N->GetNodeAttribute();
		
		int JointIndex = Out.size();
		int ChildCount = N->GetChildCount();

		Joint NewJoint;
		NewJoint.mID		= N->GetName();
		NewJoint.mParent	= JointHandle(Parent);

		auto SK_Type = Sk->GetSkeletonType();
		auto R = N->LclRotation.Get();
		auto T = N->LclTranslation.Get();
		auto S = N->LclScaling.Get();

		Quaternion		Q(R[0], R[1], R[2]);
		float4			TS = {(float)T[0], (float)T[1], (float)T[2], (float)S[0]};
		JointAnimation	JA = GetJointAnimation(N, MEM);
		JointPose		JP = {Q, TS};
		

		auto Pose = GetTransform(&JP);
		auto PTI  = DirectX::XMMatrixInverse(nullptr, Out[Parent].Global); // Parent Transform Inverse(PTI)

		auto LocalSpacePose = GetPose(PTI * Pose);
		auto PoseI = DirectX::XMMatrixInverse(nullptr , GetTransform(&LocalSpacePose));

		for (size_t I = 0; I < JA.FrameCount; ++I)
		{
			JointAnimation::Pose JP;
			JointPose AP ={ JA.Poses[I].Rotation, float4{JA.Poses[I].Translation, JA.Poses[I].Scale.x} };
			auto Temp	 = PoseI * GetTransform(&AP);
			JP.Rotation	 = DirectX::XMQuaternionRotationMatrix(Temp);
			JP.Scale	 = 1.0f;
			JP.Translation = Temp.r[3];
			JA.Poses[I] = JP;
		}

		Out.push_back({ {NewJoint, LocalSpacePose}, JA, Pose });

		for ( size_t I = 0; I < ChildCount; ++I )
			FindAllJoints(Out, N->GetChild( I ), JointIndex, MEM);
	}
}


void FindAllJoints(static_vector<JointInfo, 1024>& Out, FbxNode* N, StackAllocator* M)
{
	if (N->GetNodeAttribute() && N->GetNodeAttribute()->GetAttributeType() == FbxNodeAttribute::eSkeleton )
	{
		int JointIndex = 0;
		int ChildCount = N->GetChildCount();

		auto R = N->LclRotation.Get();
		auto T = N->LclTranslation.Get();
		auto S = N->LclScaling.Get();
		Quaternion Q(R[0], R[1], R[2]);

		JointAnimation JA = GetJointAnimation(N, M);
		JointInfo	NewJoint;
		NewJoint.Joint.Linkage.mID		= N->GetName();
		NewJoint.Joint.Linkage.mParent	= JointHandle(0);
		NewJoint.Animation				= JA;
		NewJoint.Joint.Pose				= { Q, float4(JA.Poses[0].Translation, JA.Poses[0].Scale[0]) };
		NewJoint.Global					= GetTransform(&NewJoint.Joint.Pose);
		Out.push_back(NewJoint);

		for (size_t I = 0; I < ChildCount; ++I)
			FindAllJoints(Out, N->GetChild(I), 0, M);
	}
}


/************************************************************************************************/


FlexKit::Skeleton* LoadSkeleton(fbxsdk::FbxNode* N, Engine* E)
{
	using FlexKit::AnimationClip;
	using FlexKit::Skeleton;

	auto& Joints = E->TempMem->allocate_aligned<static_vector<JointInfo, 1024>>();
	FindAllJoints( Joints, N, E->TempMem);
	
	Skeleton* S = (Skeleton*)E->LevelMem->_aligned_malloc(0x50);
	S->InitiateSkeleton(E->LevelMem, Joints.size());

	for (auto J : Joints)
		S->AddJoint(J.Joint.Linkage, J.Global);
	
	for (size_t I = 0; I < Joints.size(); ++I)
	{
		size_t ID_Length = strlen(S->Joints[I].mID) + 1;
		char* ID = (char*)E->MemoryOut->malloc(ID_Length);
		strcpy_s(ID, ID_Length, S->Joints[I].mID);
		S->Joints[I].mID = ID;
	}
		
	AnimationClip Clip;
	Clip.Skeleton	= S;
	Clip.FPS		= 60;
	Clip.FrameCount			= Joints.front().Animation.FrameCount;
	Clip.mID				= "ANIMATION";
	Clip.isLooping			= true;

	{// Single Clips for Now
		Clip.Frames	= (AnimationClip::KeyFrame*)E->LevelMem->_aligned_malloc(Clip.FrameCount * sizeof(AnimationClip::KeyFrame));

		for (size_t I = 0; I < Clip.FrameCount; ++I)
		{
			Clip.Frames[I].Joints		= (JointHandle*)E->LevelMem->_aligned_malloc(sizeof(JointHandle) * Joints.size());
			Clip.Frames[I].Poses		=   (JointPose*)E->LevelMem->_aligned_malloc(sizeof(JointPose)	 * Joints.size());
			Clip.Frames[I].JointCount	= Joints.size();

			for (size_t II = 0; II < Joints.size(); ++II)
			{
				Clip.Frames[I].Joints[II]			= JointHandle(I);
				Clip.Frames[I].Poses[II].r			= Joints[II].Animation.Poses[I].Rotation;
				Clip.Frames[I].Poses[II].ts.pFloats = Joints[II].Animation.Poses[I].Translation;
				Clip.Frames[I].Poses[II].ts.w		= Joints[II].Animation.Poses[I].Scale.x;
			}
		}
	}

	Skeleton_PushAnimation(S, E->LevelMem, Clip);
	E->TempMem->clear();

	return S;
}

typedef Pair<GeometryBlock*, StackAllocator*> GBAPair;

Pair<size_t, GBAPair> 
FindAllGeometry(fbxsdk::FbxNode* node, Engine* E, GeometryBlock* GL = nullptr, StackAllocator* GLAlloc = nullptr)
{
	using FlexKit::FillBuffer;
	using FlexKit::AnimationClip;
	using FlexKit::Skeleton;
	using MeshUtilityFunctions::BuildVertexBuffer;
	using MeshUtilityFunctions::CombinedVertexBuffer;
	using MeshUtilityFunctions::IndexList;
	using MeshUtilityFunctions::TokenList;
	using MeshUtilityFunctions::MeshBuildInfo;

	
	if ( !GLAlloc )
	{
		GLAlloc = ( StackAllocator* )E->MemoryOut->malloc( MEGABYTE );
		GLAlloc->Init( (char*)(GLAlloc + 1), MEGABYTE - sizeof(StackAllocator) );
	}
	if(!GL)
		GL = CreateGB(GLAlloc);

	auto AttributeCount = node->GetNodeAttributeCount();
	for (int itr = 0; itr < AttributeCount; ++itr){
		auto Attr = node->GetNodeAttributeByIndex(itr);
		switch (Attr->GetAttributeType())
		{
		case fbxsdk::FbxNodeAttribute::EType::eMesh:
		{
			const char* MeshName = node->GetName();
			auto test   = Attr->GetUniqueID();
			auto Mesh	= (fbxsdk::FbxMesh*)Attr;
			bool found	= false;
			size_t ID	= (size_t)Mesh;
			auto Geo	= FindGeoByID( GL, ID );
			if ( !Geo )
			{
				TriMesh	out;
				bool	Res		= false;

				TokenList& Tokens	= E->TempMem->allocate<TokenList>();
				auto MeshInfo		= TranslateToTokens( Mesh, E, Tokens );

				FlexKit::MeshUtilityFunctions::CombinedVertexBuffer& CVB = E->TempMem->allocate_aligned<FlexKit::MeshUtilityFunctions::CombinedVertexBuffer>();
				FlexKit::MeshUtilityFunctions::IndexList& IB			 = E->TempMem->allocate_aligned<FlexKit::MeshUtilityFunctions::IndexList>();

				auto BuildRes = MeshUtilityFunctions::BuildVertexBuffer( Tokens, CVB, IB, *E->TempMem, *E->TempMem, MeshInfo.Weights );
				FK_ASSERT( BuildRes.V1 == true, "Mesh Failed to Build" );

				size_t IndexCount  = GetByType<MeshBuildInfo>( BuildRes ).IndexCount;
				size_t VertexCount = GetByType<MeshBuildInfo>( BuildRes ).VertexCount;

				if (MeshInfo.Weights)
				{
					auto		SkeletonRoot	= FindSkeletonRoot(Mesh);
					if (SkeletonRoot)
					{
						Skeleton*	S				= LoadSkeleton(SkeletonRoot, E);
						out.Skeleton				= S;
					} else
						MeshInfo.Weights = false; // This will cause any Weights found to be discarded
				}

				static_vector<Pair<VERTEXBUFFER_TYPE, VERTEXBUFFER_FORMAT>> BuffersFound = { 
					{VERTEXBUFFER_TYPE::VERTEXBUFFER_TYPE_POSITION, VERTEXBUFFER_FORMAT::VERTEXBUFFER_FORMAT_R32G32B32}
				};

				if ((MeshInfo.UV))
					BuffersFound.push_back({VERTEXBUFFER_TYPE::VERTEXBUFFER_TYPE_UV, VERTEXBUFFER_FORMAT::VERTEXBUFFER_FORMAT_R32G32});

				if ((MeshInfo.Normals))
					BuffersFound.push_back({VERTEXBUFFER_TYPE::VERTEXBUFFER_TYPE_NORMAL, VERTEXBUFFER_FORMAT::VERTEXBUFFER_FORMAT_R32G32B32});

				if (( MeshInfo.Weights )) {
					BuffersFound.push_back({ VERTEXBUFFER_TYPE::VERTEXBUFFER_TYPE_ANIMATION1, VERTEXBUFFER_FORMAT::VERTEXBUFFER_FORMAT_R32G32B32	});
					BuffersFound.push_back({ VERTEXBUFFER_TYPE::VERTEXBUFFER_TYPE_ANIMATION2, VERTEXBUFFER_FORMAT::VERTEXBUFFER_FORMAT_R32G32B32A32 });
				}

				for ( size_t i = 0; i < BuffersFound.size(); ++i ) {
					CreateBuffer( VertexCount, E->TempMem, out.Buffers[ i ], (VERTEXBUFFER_TYPE)BuffersFound[i], (VERTEXBUFFER_FORMAT)BuffersFound[i] );

					switch ( (VERTEXBUFFER_TYPE)BuffersFound[i] )
					{
					case  VERTEXBUFFER_TYPE::VERTEXBUFFER_TYPE_POSITION: 
						FillBuffer( &CVB, CVB.size(), out.Buffers[ i ], WriteVertex, FetchVertexPOS );		break;
					case VERTEXBUFFER_TYPE::VERTEXBUFFER_TYPE_NORMAL: 
						FillBuffer( &CVB, CVB.size(), out.Buffers[ i ], WriteVertex, FetchVertexNormal );	break;
					case VERTEXBUFFER_TYPE::VERTEXBUFFER_TYPE_UV: 
						FillBuffer( &CVB, CVB.size(), out.Buffers[ i ], WriteUV, FetchVertexUV );			break;
					case VERTEXBUFFER_TYPE::VERTEXBUFFER_TYPE_TANGENT: 
						FillBuffer( &CVB, CVB.size(), out.Buffers[ i ], WriteVertex, FetchFloat3ZERO );		break;
					case  VERTEXBUFFER_TYPE::VERTEXBUFFER_TYPE_ANIMATION1:
						FillBuffer( &CVB, CVB.size(), out.Buffers[ i ], WriteVertex, FetchWeights );		break;
					case  VERTEXBUFFER_TYPE::VERTEXBUFFER_TYPE_ANIMATION2:
						FillBuffer( &CVB, CVB.size(), out.Buffers[ i ], Writeuint4, FetchWeightIndices );	break;
					default:
						break;
					}
				}

				CreateBuffer( IB.size(), E->TempMem, out.Buffers[ 15 ], VERTEXBUFFER_TYPE::VERTEXBUFFER_TYPE_INDEX, VERTEXBUFFER_FORMAT::VERTEXBUFFER_FORMAT_R32 );
				FillBuffer( &IB, IB.size(), out.Buffers[ 15 ], WriteIndex, FetchIndex2 );

				auto Material	= E->Materials->GetDefaultMaterial();
				auto Shader		= (MeshInfo.Weights) ? E->Materials->GetVertexShader_Animated(Material) : E->Materials->GetVertexShader(Material);
				FlexKit::CreateVertexBuffer(E->RS, out.Buffers, BuffersFound.size(), out.VertexBuffer);

				bool res = FlexKit::CreateInputLayout(E->RS, out.Buffers, BuffersFound.size(), Shader, &out.VertexBuffer);
				FK_ASSERT(res, "Failed to Create Input Layout!" );
				out.IndexCount = IndexCount;

				E->TempMem->clear();
				ClearTriMeshVBVs( &out );

				out.TriMeshID = Attr->GetUniqueID();

				auto Name		= Mesh->GetName();
				size_t NameLen	= strlen( Name );
				if ( NameLen++ ) {
					out.ID = ( char* )E->MemoryOut->malloc( NameLen );
					strcpy_s( out.ID, NameLen, Name );
				}

				out.AnimationData =  MeshInfo.Weights ? TriMesh::EAD_Skin : 0;

				PushGeo( GL, out, E->MemoryOut );
			}
		}	break;
		}
	}

	size_t NodeCount = node->GetChildCount();
	for(int itr = 0; itr < NodeCount; ++itr)
		FindAllGeometry(node->GetChild(itr), E, GL, GLAlloc);

	return{ GetGeoCount(GL), {GL, GLAlloc} };
}


/************************************************************************************************/


Pair<bool, GBAPair> LoadFBXGeometry(fbxsdk::FbxScene* S, BlockAllocator* MemoryOut, StackAllocator* MemoryTemp, StackAllocator* LevelMem, RenderSystem* RS, ShaderTable* MT,bool LoadSkeletalData = false)
{
	Engine E = { MemoryOut, MemoryTemp, LevelMem, RS, MT };
	auto Res = FindAllGeometry(S->GetRootNode(), &E);

	return{ true, Res };
}


/************************************************************************************************/

SceneStats ProcessSceneNodes(fbxsdk::FbxScene* scene, Scene* SceneOut, fbxsdk::FbxNode* Node, NodeHandle ParentNode, EngineMemory* E)
{
	using FlexKit::SetParentNode;
	SceneStats Stats = {};

	if (Node)
	{
		int AttributeCount	= Node->GetNodeAttributeCount();
		int ChildCount		= Node->GetChildCount();
		if (ChildCount || AttributeCount)
		{
			NodeHandle Nodehndl = GetZeroedNode(E->Nodes);
			SetParentNode(E->Nodes, ParentNode, Nodehndl);

			auto Position = Node->LclTranslation.	Get();
			auto LclScale = Node->LclScaling.		Get();
			auto rotation = Node->LclRotation.		Get();

			TranslateWorld	( E->Nodes, Nodehndl,				{Position.mData[0], Position.mData[1], Position.mData[2]});
			Scale			( E->Nodes, Nodehndl,				{LclScale.mData[0], LclScale.mData[1], LclScale.mData[2]});
			SetOrientation	( E->Nodes, Nodehndl, Quaternion	(rotation.mData[0], rotation.mData[1], rotation.mData[2]));

			size_t itr = 0;
			for (; itr < AttributeCount; ++itr)
			{
				auto Attr = Node->GetNodeAttributeByIndex(itr);
				auto AttrType = Attr->GetAttributeType();
				switch (AttrType)
				{
				case FbxNodeAttribute::eMesh:
				{
					std::cout << "Entity Found: " << Node->GetName() << "\n";
					
					auto EntityHandle = SceneOut->GetFreeEntity();
					if (EntityHandle) {
						auto NodeName	 = Node->GetName();
						auto Entity		 = SceneOut->GetEntity(EntityHandle);
						Entity->Posed = false;

						if ( NodeName ){
							size_t NodeStrLen = strnlen( NodeName, 0x40 );
							strncpy( SceneOut->GetEntityID( EntityHandle ), NodeName, NodeStrLen);
						}

						CreateEntity( E->RenderSystem, Entity, EntityDesc{ E->BuiltInMaterials.DefaultMaterial } );
						auto TriHandle = SearchForMesh(SceneOut, Attr->GetUniqueID());

						if ( TriHandle ) {
							Entity->Node		= Nodehndl;
							Entity->Mesh		= SceneOut->GetTriMesh(TriHandle);
						}

						++Stats.EntityCount;
					}
#ifdef _DEBUG
					else
						FK_ASSERT(0, "MET MAX ENTITY COUNT/n");
#endif				
				}	break;
				case FbxNodeAttribute::eLight:
				{
					std::cout << "Light Found: " << Node->GetName() << "\n";

					auto Light				= static_cast<fbxsdk::FbxLight*>(Attr);
					auto Type				= Light->LightType.	Get();
					auto Cast				= Light->CastLight.	Get();
					auto I					= Light->Intensity.	Get();
					auto K					= Light->Color.		Get();
					auto R					= Light->OuterAngle.Get();

					auto Lighthndl			= SceneOut->GetFreeLight();
					auto SceneLight			= SceneOut->GetPLight	( Lighthndl );
					SceneLight->K			= TranslateToFloat3		( K );			// COLOR for the Confused
					SceneLight->I			= I;
					SceneLight->Position	= Nodehndl;
					SceneLight->R			= I * 100;

					++Stats.LightCount;
				}	break;
				case FbxNodeAttribute::eSkeleton:
				{

				}	break;
				case FbxNodeAttribute::eMarker:
				case FbxNodeAttribute::eUnknown:
				default:
					break;
				}
			}

			for (size_t itr = 0; itr < ChildCount; ++itr)
				Stats += ProcessSceneNodes(scene, SceneOut, Node->GetChild(itr), Nodehndl, E);

		}
	}
	return Stats;
}


/************************************************************************************************/


struct SceneGeometry
{
	TriMesh*	Meshes;
	size_t		MeshCount;
};

void CountNodeContents(fbxsdk::FbxNode* N, Scene_Desc& Desc)
{
	size_t AttribCount = N->GetNodeAttributeCount();
	for (size_t I = 0; I < AttribCount; ++I)
	{
		auto A = N->GetNodeAttributeByIndex(I);
		switch (A->GetAttributeType())
		{
		case fbxsdk::FbxNodeAttribute::EType::eLight:
			Desc.MaxPointLightCount++; 	break;
		case fbxsdk::FbxNodeAttribute::EType::eSkeleton:
			Desc.MaxSkeletonCount++;	break;
		case fbxsdk::FbxNodeAttribute::EType::eMesh:
			Desc.MaxTriMeshCount++;		break;
		}
	}

	size_t NodeCount = N->GetChildCount();
	for (size_t I = 0; I < NodeCount; ++I)
		CountNodeContents(N->GetChild(I), Desc);
}

Scene_Desc CountSceneContents(fbxsdk::FbxScene* S)
{
	Scene_Desc	Desc = {};
	size_t NodeCount = S->GetNodeCount();
	for (size_t I = 0; I < NodeCount; ++I)
		CountNodeContents(S->GetNode(I), Desc);

	return Desc;
}


Pair<bool, SceneStats>
TranslateFBXScene(fbxsdk::FbxScene* S, Scene* SceneOut, SceneGeometry Geo, NodeHandle SceneRoot, EngineMemory* Engine)
{
	using FlexKit::Scale;

	fbxsdk::FbxNode* node = S->GetRootNode();
	{
		Scene_Desc desc = CountSceneContents(S);
		desc.Root				= SceneRoot;
		desc.MaxEntityCount		= S->GetNodeCount();
		desc.SceneMemory		= &Engine->BlockAllocator;
		desc.MaxTriMeshCount	= 10;
		InitiateScene(SceneOut, Engine, &desc);

		SceneOut->Geometry		= Geo.Meshes;
		SceneOut->GeometryUsed	= Geo.MeshCount;
	}

	auto SceneInfo = ProcessSceneNodes(S, SceneOut, node, SceneRoot, Engine);
	return{ true, SceneInfo };
}


void Cleanup(Scene* Scene)
{
	for (size_t I = 0; I < Scene->EntitiesUsed; ++I) CleanUpEntity(Scene->Entities + I);
	for (size_t I = 0; I < Scene->GeometryUsed; ++I) CleanUpTriMesh(Scene->Geometry + I);
}



Scene* LoadSceneFromFBXFile(char* AssetLocation, LoadSceneFromFBXFile_DESC* Desc)
{
	size_t MaxMeshCount					= 10;
	fbxsdk::FbxManager*		Manager     = fbxsdk::FbxManager::Create();
	fbxsdk::FbxIOSettings*	Settings	= fbxsdk::FbxIOSettings::Create(Manager, IOSROOT);
	fbxsdk::FbxScene*		INScene     = nullptr;

	Manager->SetIOSettings(Settings);

	auto res = LoadFBXScene( AssetLocation, Manager, Settings );
	if (res)
	{
		Scene* NewScene = &Desc->LevelMem->allocate_aligned<Scene>();
		auto LoadRes = LoadFBXGeometry((FbxScene*)res, Desc->BlockMemory, Desc->TempMem, Desc->LevelMem, Desc->RS, Desc->ST);

		SceneGeometry	Geo;
		Geo.MeshCount	= GetGeoCount((GBAPair)LoadRes);
		Geo.Meshes		= (TriMesh*)Desc->LevelMem->_aligned_malloc(sizeof(TriMesh) * Geo.MeshCount);
		MoveGeo((GBAPair)LoadRes, Geo.Meshes);
		Desc->BlockMemory->free((StackAllocator*)(GBAPair)LoadRes); // Need to Handle Aligned Cases first

		auto SceneData = TranslateFBXScene(GetByType<FbxScene*>(res), NewScene, Geo, Desc->SceneRoot, Desc->Engine);

		Manager->Destroy();

		return NewScene;
	}
	return nullptr;
}

/************************************************************************************************/


FileDir SelectFile()
{
	IFileDialog* pFD = nullptr;
	FK_ASSERT( SUCCEEDED( CoInitialize( nullptr ) ) );
	auto HRES = CoCreateInstance( CLSID_FileOpenDialog, nullptr, CLSCTX_INPROC_SERVER, IID_PPV_ARGS(&pFD) );
	if ( SUCCEEDED( HRES ) )
	{
		DWORD Flags;
		HRES = pFD->GetOptions( &Flags );

		if ( SUCCEEDED( HRES ) )
		{
			pFD->SetOptions( FOS_FILEMUSTEXIST | FOS_FORCEFILESYSTEM );
		} else return FileDir();
		
		FINALLY
		{
			if(pFD)
				pFD->Release();
		}
		FINALLYOVER

		IShellItem* pItem = nullptr;

		WCHAR	CurrentDirectory[ 256 ];
		GetCurrentDirectory( 256, CurrentDirectory );
			
		HRES = pFD->GetFolder(&pItem);
		if ( SUCCEEDED( HRES ) )
		{
			HRES = SHCreateItemFromParsingName( CurrentDirectory, nullptr, IID_PPV_ARGS( &pItem ) );
			pFD->SetDefaultFolder(pItem);
		}

		FINALLY
		{
			if(pItem)
				pItem->Release();
		}
		FINALLYOVER

		HRES = pFD->Show( nullptr );
		if ( SUCCEEDED( HRES ) )
		{
			IShellItem* pItem = nullptr;
			HRES = pFD->GetResult( &pItem );
			if(SUCCEEDED(HRES))
			{
				FINALLY
				{
				if(pItem)
					pItem->Release();
				}
				FINALLYOVER

				PWSTR FilePath;
				HRES = pItem->GetDisplayName( SIGDN_FILESYSPATH, &FilePath );
				if ( SUCCEEDED( HRES ) )
				{
					size_t length = wcslen( FilePath );
					FileDir	Dir;
					BOOL DefaultCharUsed = 0;
					CCHAR	DChar = ' ';
					auto res = WideCharToMultiByte( CP_UTF8, 0, FilePath, length, Dir.str, 256, nullptr, nullptr);
					if ( !res )
					{
						IErrorInfo*	INFO = nullptr;
						auto Err = GetLastError();
					}
					Dir.str[length] = '\0';
					Dir.Valid = true;
					return Dir;
				}
			}
		}
	}
	return FileDir();
}